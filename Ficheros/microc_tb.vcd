$date
	Thu Nov 21 01:01:53 2024
$end
$version
	Icarus Verilog
$end
$timescale
	10ps
$end
$scope module microc_tb $end
$var wire 1 ! z $end
$var wire 6 " opcode [5:0] $end
$var reg 1 # clk $end
$var reg 3 $ op [2:0] $end
$var reg 1 % reset $end
$var reg 1 & s_inc $end
$var reg 1 ' s_inm $end
$var reg 1 ( we3 $end
$var reg 1 ) wez $end
$scope module microc $end
$var wire 3 * Op [2:0] $end
$var wire 1 # clk $end
$var wire 1 % reset $end
$var wire 1 & s_inc $end
$var wire 1 ' s_inm $end
$var wire 1 ( we3 $end
$var wire 1 ) wez $end
$var wire 1 + z_alu $end
$var wire 1 ! z $end
$var wire 8 , wd3 [7:0] $end
$var wire 8 - rd2 [7:0] $end
$var wire 8 . rd1 [7:0] $end
$var wire 10 / pc_next [9:0] $end
$var wire 10 0 pc_mux_out [9:0] $end
$var wire 10 1 pc [9:0] $end
$var wire 16 2 instruccion [15:0] $end
$var wire 8 3 alu_out [7:0] $end
$var wire 6 4 Opcode [5:0] $end
$scope module alu1 $end
$var wire 3 5 Op [2:0] $end
$var wire 8 6 B [7:0] $end
$var wire 8 7 A [7:0] $end
$var reg 8 8 S [7:0] $end
$var reg 1 + zero $end
$upscope $end
$scope module bancoRegistros $end
$var wire 4 9 RA1 [3:0] $end
$var wire 4 : RA2 [3:0] $end
$var wire 4 ; WA3 [3:0] $end
$var wire 1 # clk $end
$var wire 1 ( we3 $end
$var wire 8 < WD3 [7:0] $end
$var wire 8 = RD2 [7:0] $end
$var wire 8 > RD1 [7:0] $end
$upscope $end
$scope module ffz $end
$var wire 1 ) carga $end
$var wire 1 # clk $end
$var wire 1 + d $end
$var wire 1 % reset $end
$var reg 1 ! q $end
$upscope $end
$scope module memProg $end
$var wire 16 ? Data [15:0] $end
$var wire 1 # clk $end
$var wire 10 @ Address [9:0] $end
$upscope $end
$scope module muxBancoReg $end
$var wire 8 A D0 [7:0] $end
$var wire 8 B D1 [7:0] $end
$var wire 1 & s $end
$var wire 8 C Y [7:0] $end
$var parameter 32 D WIDTH $end
$upscope $end
$scope module muxPC $end
$var wire 10 E D0 [9:0] $end
$var wire 1 & s $end
$var wire 10 F Y [9:0] $end
$var wire 10 G D1 [9:0] $end
$var parameter 32 H WIDTH $end
$upscope $end
$scope module programCounter $end
$var wire 10 I D [9:0] $end
$var wire 1 # clk $end
$var wire 1 % reset $end
$var parameter 32 J WIDTH $end
$var reg 10 K Q [9:0] $end
$upscope $end
$scope module sumPC $end
$var wire 10 L A [9:0] $end
$var wire 10 M B [9:0] $end
$var wire 10 N Y [9:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1010 J
b1010 H
b1000 D
$end
#0
$dumpvars
b1 N
b1 M
b0 L
b0 K
b0 I
b1 G
b0 F
b0 E
b0 C
b0 B
b0 A
b0 @
b0 ?
b0 >
b0 =
b0 <
b0 ;
b0 :
b0 9
b0 8
b0 7
b0 6
b0 5
b0 4
b0 3
b0 2
b0 1
b0 0
b1 /
b0 .
b0 -
b0 ,
1+
b0 *
0)
0(
0'
0&
1%
b0 $
1#
b0 "
0!
$end
#1000
0%
#2000
0#
#4000
1#
#6000
b1 0
b1 F
b1 I
0#
1'
1&
1(
#8000
b10 0
b10 F
b10 I
b10 /
b10 G
b10 N
b1 1
b1 @
b1 K
b1 L
1#
#10000
0#
#12000
b11 0
b11 F
b11 I
b11 /
b11 G
b11 N
b10 1
b10 @
b10 K
b10 L
1#
#14000
0#
#16000
b100 0
b100 F
b100 I
b100 /
b100 G
b100 N
b11 1
b11 @
b11 K
b11 L
1#
#18000
0#
#20000
b101 0
b101 F
b101 I
b101 /
b101 G
b101 N
b100 1
b100 @
b100 K
b100 L
1#
#22000
0#
b10 $
b10 *
b10 5
0'
1)
#24000
b110 0
b110 F
b110 I
b110 /
b110 G
b110 N
b101 1
b101 @
b101 K
b101 L
1!
1#
#26000
0#
b11 $
b11 *
b11 5
#28000
b111 0
b111 F
b111 I
b111 /
b111 G
b111 N
b110 1
b110 @
b110 K
b110 L
1#
#30000
b0 0
b0 F
b0 I
0#
b0 $
b0 *
b0 5
0&
0)
0(
#32000
b1 /
b1 G
b1 N
b0 1
b0 @
b0 K
b0 L
1#
#34000
b1 0
b1 F
b1 I
0#
b10 $
b10 *
b10 5
1&
1)
1(
#36000
b10 0
b10 F
b10 I
b10 /
b10 G
b10 N
b1 1
b1 @
b1 K
b1 L
1#
#38000
0#
b11 $
b11 *
b11 5
#40000
b11 0
b11 F
b11 I
b11 /
b11 G
b11 N
b10 1
b10 @
b10 K
b10 L
1#
#42000
0#
b0 $
b0 *
b0 5
0)
0(
#44000
b100 0
b100 F
b100 I
b100 /
b100 G
b100 N
b11 1
b11 @
b11 K
b11 L
1#
#46000
b0 0
b0 F
b0 I
0#
0&
1)
#48000
b1 /
b1 G
b1 N
b0 1
b0 @
b0 K
b0 L
1#
